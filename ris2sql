#!/usr/bin/env python3

# Build a structure like so (or better, stream it, avoiding memory pressure):
# {
#   1, [
#         {"TY", "JOUR"},
#         {"TI", "#1 mine remembered"},
#         {"AU", "Stonebanks, Roger"},
#         {"KW", "History"}
#      ]
#   2, [ [] ]
# }
#
# Then iterate over all of the objects, dumping output into appropriate files:
#
# for rec in record:
#     if 

import os
import sys

class RISParser:

    # We expect each of these fields to appear only once for a given citation
    core_map = {
        'AB': 'abstract',
        'DA': 'date',
        'DP': 'database_pub',
        'SP': 'start_page',
        'EP': 'end_page',
        'LA': 'language',
        'CN': 'call_number',
        'CY': 'pub_place',
        'M3': 'work_type',
        'PB': 'publisher',
        'PY': 'pub_year',
        'TY': 'type', # type of the citation
        'TI': 'title',
        'T2': 'title2',
        'T3': 'title3',
        'J2': 'alternate_title', # often abbrev. journal or book title
        'ST': 'short_title', # often abbrev. journal or book title
        'DO': 'doi',
        'UR': 'url',
        'L2': 'local_url',
        'SN': 'isbn_issn',
        'ET': 'edition',
        'M1': 'number',
        'IS': 'issue_number',
        'VL': 'volume',
        'Y2': 'access_date'
    }

    # multiple authors per citation
    author_map = {
        'AU': 'primary',
        'A2': 'secondary',
        'A3': 'tertiary',
        'A4': 'quaternary'
    }

    skip_keys = ('L1', 'L4')

    def __init__(self):
        self.rec = 0
        self.core = {}
        self.init_core()

    def init_core(self):
        self.authors = [] 
        self.keywords = [] 
        self.notes = []
        self.lastkey = "" 
        self.lastval = ""
        for v in RISParser.core_map.values():
            self.core[v] = None

    def parse(self, line):
        if len(line) == 1:
            pass
        elif line[0:-1] == 'ER  - ':
            self.printem()
        elif line[2:6] == '  - ':
            self.store()
            self.lastkey = line[0:2]
            self.lastval = line[6:-1]
        else:
            self.lastval = self.lastval.join(("\n", line[0:-1]))

    def printem(self):
        self.print_core()
        self.print_authors()
        self.print_keywords()
        self.init_core()
        self.rec += 1

    def print_core(self):
        print(self.rec, self.core['type'], self.core['title'], self.core['title2'], self.core['title3'])
        
    def print_authors(self):
        for x, y in self.authors:
            print(self.rec, "AUTHOR", x, y)

    def print_keywords(self):
        for x in self.keywords:
            print(self.rec, "KEYWORD", x)

    def store(self):
        if self.lastkey in RISParser.core_map:
            self.core[RISParser.core_map[self.lastkey]] = self.lastval
        elif self.lastkey in RISParser.author_map:
            self.authors.append(([RISParser.author_map[self.lastkey], self.lastval]))
        elif self.lastkey == 'KW':
            self.keywords.append(self.lastval)
        elif self.lastkey == 'N1':
            self.notes.append(self.lastval)
        elif self.lastkey in RISParser.skip_keys:
            pass
        elif self.lastkey:
            print("Undefined key: ", self.lastkey)

    def parsefile(self):
        with open("cawls.ris", "r") as f:
            for line in f:
                self.parse(line)

if __name__ == "__main__":
    foo = RISParser()
    foo.parsefile()
