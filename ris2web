#!/usr/bin/env python3
"Converts a database of RIS into HTML"

from flask import Flask, abort, redirect, request, render_template, url_for
from os.path import abspath, dirname
import configparser
import psycopg2
import re

app = Flask(__name__)
app.root_path = abspath(dirname(__file__))
app.url_base = '/'
config = configparser.ConfigParser()
config.read(app.root_path + '/config.ini')

class Author:
    "Models an author"

    def __init__(self, record):
        "Init the author"
        self.id = record[0]
        self.author_type = record[1]
        self.name = record[2]
        self.uri = record[3]

class RIS:
    "Models a RIS record"

    def __init__(self, record, authors, kw, notes):
        "Init the RIS record"
        self.id = record[0]
        self.abstract = record[1]
        self.call_number = record[2]
        self.pub_place = record[3]
        self.pub_date = record[4]
        self.pub_date_human = risdate2human(record[4])
        self.doi = record[5]
        self.pub_database = record[6]
        self.end_page = record[7]
        self.edition = record[8]
        self.issue_number = record[9]
        self.alternate_title = record[10]
        self.local_url = record[11]
        self.language = record[12]
        self.id_number = record[13]
        self.work_type = record[14]
        self.publisher = record[15]
        self.pub_year = record[16]
        self.isbn_issn = record[17]
        self.start_page = record[18]
        self.short_title = record[19]
        self.title2 = record[20]
        self.title3 = record[21]
        self.title = record[22]
        self.doc_type = record[23]
        self.url = record[24]
        self.volume = record[25]
        self.access_date = record[26]
        self.init_authors(authors)
        self.kw = kw
        self.notes = notes
        self.get_schema_type()

    def init_authors(self, authors):
        "Init the authors"
        self.authors = []
        for a in authors:
            author = Author(a)
            self.authors.append(author)

    def get_schema_type(self):
        """
        Get the schema.org type mapped from RIS reference type

        See http://en.wikipedia.org/wiki/RIS_%28file_format%29#Type_of_reference
        """
        if self.doc_type == 'JOUR':
            self.schema_type = 'ScholarlyArticle'
            self.pub_venue = 'Periodical'
            self.doc_type_human = 'Article'
        elif self.doc_type == 'CHAP':
            self.schema_type = 'Article'
            self.pub_venue = 'Book'
            self.doc_type_human = 'Book chapter'
        elif self.doc_type == 'BOOK':
            self.schema_type = 'Book'
            self.pub_venue = 'Book'
            self.doc_type_human = 'Book'
        elif self.doc_type == 'THES':
            self.schema_type = 'ScholarlyArticle'
            self.pub_venue = 'Periodical'
            self.doc_type_human = 'Thesis'
        elif self.doc_type == 'RPRT':
            self.schema_type = 'Article'
            self.pub_venue = 'Periodical'
            self.doc_type_human = 'Report'
        elif self.doc_type == 'MGZN':
            self.schema_type = 'Article'
            self.pub_venue = 'Periodical'
            self.doc_type_human = 'Article'
        elif self.doc_type == 'BLOG':
            self.schema_type = 'BlogPosting'
            self.pub_venue = 'Blog'
            self.doc_type_human = 'Blog post'
        elif self.doc_type == 'MPCT':
            self.schema_type = 'Movie'
            self.doc_type_human = 'Movie'
        elif self.doc_type == 'ELEC':
            self.schema_type = 'WebPage'
            self.doc_type_human = 'Web page'
        elif self.doc_type == 'CASE':
            self.schema_type = 'CreativeWork'
            self.doc_type_human = 'Case study'
        elif self.doc_type == 'MAP':
            self.schema_type = 'Map'
            self.doc_type_human = 'Map'
        else:
            self.schema_type = 'CreativeWork'

def get_db():
    """
    Get a database connection

    With a host attribute in the mix, you could connect to a remote
    database, but then you would have to set up .pgpass or add a
    password parameter, so let's keep it simple.
    """

    try:
        conn = psycopg2.connect(
            database=config['database']['dbname'],
            user=config['database']['dbuser']
        )
        return conn
    except Exception as e:
        print(e)

@app.route('/citation/<int:work_id>')
def show_citation(work_id=None):
    "Show the specified work"
    if work_id:
        return citation_html(work_id)
    else:
        return home_html()

def citation_html(work_id):
    "Show a single citation"
    try:
        conn = get_db()
        works = conn.cursor()
        authors = conn.cursor()
        kw = conn.cursor()
        notes = conn.cursor()
        works.execute("SELECT id, abstract, call_number, pub_place, \
                pub_date, doi, pub_database, end_page, edition, issue_number, \
                alternate_title, local_url, language, id_number, work_type, \
                publisher, pub_year, isbn_issn, start_page, short_title, \
                title2, title3, title, doc_type, url, volume, access_date \
            FROM citations \
            WHERE id = %s", (work_id,))
        record = works.fetchone()
        authors.execute("SELECT id, author_type, author_name, uri FROM authored_v WHERE citation = %s ORDER BY id ASC", (record[0],))
        kw.execute("SELECT keywords FROM citation_keywords WHERE citation = %s ORDER BY keywords", (record[0],))
        notes.execute("SELECT notes FROM citation_notes WHERE citation = %s ORDER BY id ASC", (record[0],))
        r = RIS(record, authors, kw.fetchall(), notes.fetchall())
        return render_template('citation.html', record=r)
        works.close()
        authors.close()
        kw.close()
        notes.close()
    except Exception as e:
        print(e)
        return abort(500)

@app.route('/search', methods=['GET', 'POST'])
def search_bar(search=None):
    "Show the results of a search with GET"
    s = request.args.get('s', '')
    return redirect(url_for('search_results', search=s))

@app.route('/search/<search>', methods=['GET', 'POST'])
def search_results(search=None):
    "Show the results of a search"

    try:
        conn = get_db()
        s = conn.cursor()
        q = parse_query(search)
        s.execute("SELECT citation, title, rank FROM ris_search(%s)", (q,))
        return render_template('search_results.html', results=s.fetchall())
    except Exception as e:
        print(e)
        return abort(500)

@app.route('/filter/<path:facets>', methods=['GET', 'POST'])
def filter_citations(facets=None):
    "Facet results by publication, document type, keyword"

    try:
        conn = get_db()
        s = conn.cursor()
        f = Facet(facets)
        if f.ftype == 'author':
            s.execute("SELECT citation, title, rank FROM author_citations(%s) ORDER BY 2", (f.val,))
        else:
            s.execute("SELECT citation, title, rank FROM ris_filter(%s, %s) ORDER BY 2", (f.ftype, f.val,))
        return render_template('search_results.html', results=s.fetchall())
    except Exception as e:
        print(e)
        return abort(500)

def risdate2human(date):
    "Turn a RIS date <YYYY>/<MM>/<DD>/<other> into human-friendly"

    if not date:
        return None
    return date.replace('/', ' ')

def parse_query(q):
    """
    Turn a human search string into PostgreSQL tsquery

    Add a space to the start of the search string so that we can do a simple
    replace() for the boolean operators. No fancy quoting or anything here.
    """

    q = " %s" % (q)
    q = q.replace(' AND ', ' & ')
    q = q.replace(' OR ', ' | ')
    q = q.replace(' NOT ', ' &! ')
    # Finally, replace all spaces with AND operator
    q = re.sub(r'([^&|!]) ([^&|!])', r'\1 & \2', q)
    return q

@app.route('/')
def home_html():
    "Home page"

    conn = get_db()
    a = conn.cursor()
    a.execute(r"""SELECT id, author_name, COUNT(*)
        FROM authored_v
        GROUP BY id, author_name
        ORDER BY 3 DESC
        LIMIT 50;"""
    )
    p = conn.cursor()
    p.execute(r"""SELECT title2, COUNT(*)
        FROM citations
        GROUP BY title2
        ORDER BY 2 DESC
        LIMIT 50;"""
    )
    return render_template('home.html', summary={'authors': a.fetchall(), 'pubs': p.fetchall()})

class Facet:
    """
    Represents structured values for facets

    For example, "doctype:journal" to { 'type': 'doc_type', 'value': 'JOUR' }
    """

    def __init__(self, facets):
        self.ft_map = {
            'doctype': 'doc_type',
            'publication': 'title2',
            'keyword': 'keyword',
            'author': 'author'
        }

        self.dt_map = {
            'Article': 'JOUR',
            'Journal': 'JOUR',
            'Book': 'BOOK',
            'Book chapter': 'CHAP',
            'Thesis': 'THES',
            'Electronic': 'ELEC',
            'Report': 'RPRT',
            'Magazine': 'MGZN',
            'Newspaper': 'NEWS',
            'Movie': 'MPCT',
            'General': 'GEN',
            'Video': 'VIDEO',
            'Case study': 'CASE',
            'Map': 'MAP'
        }

        f = facets.split(':', 1)
        self.ftype = self.get_db_ftype(f[0])
        if self.ftype == 'doc_type':
            self.val = self.get_db_doctype(f[1])
        else:
            self.val = f[1]

    def get_db_doctype(self, rawtype):
        if rawtype in self.dt_map:
            return self.dt_map[rawtype]
        else:
            return None

    def get_db_ftype(self, rawtype):
        if rawtype in self.ft_map:
            return self.ft_map[rawtype]
        else:
            return None

if __name__ == '__main__':
    app.run()
